<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xgon.classmanager.mapper.StudentMapper">
    <insert id="addStudent" parameterType="Student">
        <!-- 配置插入数据时，获取所插入记录的 id -->
        <selectKey keyProperty="id" resultType="Integer" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

        INSERT INTO students(account, password, name, sex, id_card, create_time, update_time, is_deleted)
        VALUES (#{account}, #{password}, #{name}, #{sex}, #{idCard}, #{createTime}, #{updateTime}, #{isDeleted})
    </insert>

    <update id="editStudent" parameterType="Student">
        UPDATE students
        <trim prefix="SET" suffixOverrides=",">
            <if test="account != null">account = #{account},</if>
            <if test="name != null">name = #{name},</if>
            <if test="sex != null">sex = #{sex},</if>
            <if test="idCard != null">id_card = #{idCard},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        WHERE id = #{id}
    </update>

    <delete id="removeStudent" parameterType="Student">
        UPDATE students
        <trim prefix="SET">
            <if test="isDeleted == 1">is_deleted = #{isDeleted}</if>
        </trim>
        WHERE id = #{id}
    </delete>

    <!-- 不要使用 student.getAccount()，因为getAccount()是其从父类处继承的！
     account即使是私有属性，mybatis也会通过反射直接访问到。
        Java Column ‘xxx‘ in where clause is ambiguous问题解决：
        多个表都有role_id字段，但是没指定role_id是位于哪个表。
        解决办法：role_id前面加上表名。

        由于学生表和家长表等多个表都具有同名字段，为了在进行关联的嵌套结果映射时不会被混淆（混淆会产生错误的映射、错误的结果集），
        需要为每个表的字段设置别名，这就需要我们手动的列出每个涉及到的字段 或 仅仅是涉及到的同名字段(比如只有学生表有id_card字段，就无须再为该字段设置别名)
    -->
    <select id="queryStudent" resultMap="detailedStudentResult">
        SELECT
        <include refid="detailedColumnsDivision">
            <property name="student" value="s"/>
            <property name="stuclass" value="sc"/>
            <property name="classroom" value="c"/>
            <property name="parents" value="p"/>
            <property name="stuparent" value="sp"/>
        </include>
        FROM students s
        LEFT OUTER JOIN stuclass sc ON sc.student_id = s.id
        LEFT OUTER JOIN classroom c ON c.id = sc.classroom_id
        LEFT OUTER JOIN stuparent sp ON sp.student_id = s.id
        LEFT OUTER JOIN parents p ON p.id = sp.parent_id
        <trim prefix="WHERE" suffixOverrides="AND | OR">
            <if test="student != null">
                <!-- test="student != null and student.account != null" -->
                <if test="student.account != null">
                    s.account = #{student.account, jdbcType=VARCHAR} AND
                    <if test="student.name != null">s.name = #{student.name, jdbcType=VARCHAR}</if>
                </if>
            </if>
        </trim>
        LIMIT #{page.startIndex} , #{page.pageSize}
    </select>

    <!-- 不需要设置 ${stuclass}.id AS ${stuclass}_id，因为它在表关联查询中不起作用 -->
    <sql id="detailedColumnsDivision">
        ${student}.id AS ${student}_id,
        ${student}.account AS ${student}_account,
        ${student}.password AS ${student}_password,
        ${student}.name AS ${student}_name,
        ${student}.sex AS ${student}_sex,
        ${student}.id_card AS ${student}_id_card,
        ${student}.create_time AS ${student}_create_time,
        ${student}.update_time AS ${student}_update_time,
        ${student}.is_deleted AS ${student}_is_deleted,
        ${stuclass}.student_id AS ${stuclass}_student_id,
        ${stuclass}.classroom_id AS ${stuclass}_classroom_id,
        ${classroom}.id AS ${classroom}_id,
        ${classroom}.name AS ${classroom}_name,
        ${classroom}.year AS ${classroom}_year,
        ${classroom}.create_time AS ${classroom}_create_time,
        ${classroom}.update_time AS ${classroom}_update_time,
        ${classroom}.is_deleted AS ${classroom}_is_deleted,
        ${stuparent}.student_id AS ${stuparent}_student_id,
        ${stuparent}.parent_id AS ${stuparent}_parent_id,
        ${parents}.id AS ${parents}_id,
        ${parents}.account AS ${parents}_account,
        ${parents}.password AS ${parents}_password,
        ${parents}.name AS ${parents}_name,
        ${parents}.phone AS ${parents}_phone,
        ${parents}.sex AS ${parents}_sex,
        ${parents}.create_time AS ${parents}_create_time,
        ${parents}.update_time AS ${parents}_update_time,
        ${parents}.is_deleted AS ${parents}_is_deleted
    </sql>

    <resultMap id="detailedStudentResult" type="Student">
        <id property="id" column="s_id"/>
        <result property="account" column="s_account"/>
        <result property="password" column="s_password"/>
        <result property="name" column="s_name"/>
        <result property="sex" column="s_sex"/>
        <result property="idCard" column="s_id_card"/>
        <result property="createTime" column="s_create_time"/>
        <result property="updateTime" column="s_update_time"/>
        <result property="isDeleted" column="s_is_deleted"/>
        <!-- <association property="classroom" column="sc_classroom_id" javaType="Classroom" resultMap="classroomResult"/> -->
        <collection property="classrooms" column="sc_classroom_id" ofType="Classroom" resultMap="classroomsResult"/>
        <!-- 会自动识别为 List<Parent> -->
        <collection property="parents" column="s_id" ofType="Parent" resultMap="parentsResult"/>
    </resultMap>

    <resultMap id="classroomsResult" type="Classroom">
        <id property="id" column="c_id"/>
        <result property="name" column="c_name"/>
        <result property="year" column="c_year"/>
        <result property="createTime" column="c_create_time"/>
        <result property="updateTime" column="c_update_time"/>
        <result property="isDeleted" column="c_is_deleted"/>
    </resultMap>

    <resultMap id="parentsResult" type="Parent">
        <id property="id" column="p_id"/>
        <result property="account" column="p_account"/>
        <result property="password" column="p_password"/>
        <result property="name" column="p_name"/>
        <result property="phone" column="p_phone"/>
        <result property="sex" column="p_sex"/>
        <result property="createTime" column="p_create_time"/>
        <result property="updateTime" column="p_update_time"/>
        <result property="isDeleted" column="p_is_deleted"/>
    </resultMap>

    <!--
    <update id="addStudentParent" parameterType="Student">
        <if test="#{0} != null and parents != null">
            UPDATE parents p
            SET student_id = #{id}
            WHERE p.id IN
            <foreach collection="parents" item="item" index="index" open="(" close=")" separator=",">
                #{item.id}
            </foreach>
        </if>
    </update>
    -->
    <insert id="addStudentParent" parameterType="Student">
        <if test="#{0} != null and parents != null">
            INSERT INTO stuparent(student_id, parent_id)
            VALUES
            <foreach collection="parents" item="item" index="index" open="(" close=")" separator=",">
                #{id}, #{item.id}
            </foreach>
        </if>
    </insert>
</mapper>
